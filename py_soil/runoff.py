# -*- coding: utf-8 -*-
"""
Functions for predicting runoff, relating to the NRCS curve-number method.
"""

import math
import numpy as np
from numpy import exp, log, nan
from sympy.solvers import solve
from sympy import Symbol, Eq
#import greenampt
import pandas as pd
import os

CN_df = pd.read_csv(os.path.join('data', 'curve_nums.csv'))


CN_df.set_index(['crop_cover', 'treatment_or_practice', 'hydrologic_condition'], inplace = True)


def CN_get(crop_cover, hydro_group, treatment_or_practice = None, hydrologic_condition = None):
    '''Retrieve Curve Number for given crop_cover and hydro-group.
    By default it gives the average for all sets of treatment_or_practice, 
    and hydrologic_condition for that given crop and hydro-group.
    
    Optionally, you can get more specific data by passing an argument to treatment_or_practice
    or hydrologic_condition, but be careful, these names must correctly formatted. 
    
    See the spreadsheet at data/curve_nums for possible values.
    '''
    
    vars_ = [crop_cover, treatment_or_practice, hydrologic_condition]
    
    keepers = [(x, i) for i,x in enumerate() if x]
    names = [t[0].lower() for t in keepers]
    indicies = [t[1] for t in keepers]
    
    try:
        subset = CN_df.xs(names, level = indicies)
    
    except:
        raise ValueError("Key combination is invalid. Examine the spreadsheet at\n data/curve_nums.csv to see valid key combos.")
        
    
    
    return subset[hydro_group].mean()        
    
    

def calcKeff(CN, Ksat):
    '''
    Calculate the effective hydraulic conductivity for a soil
    
    Swat technical docs Page 108
    
    Parameters
    ----------
    curve_num : numeric
        SCS curve number for soil
    Ksat : numeric
        Saturated Hydraulic conductivity for soil (mm/hr)

    Returns
    -------
    Keff : float
    effective hydraulic conductivity in mm/hr

    
    
    
    '''
    
    
    
    Ke = (56.82 * (Ksat)**.286) /(1+(.051* exp(.062*CN))) -2
    if Ke > .5 * Ksat or Ke<0:
        return .5 * Ksat
    
    return Ke




def rational_eq(Qsurf, Rday, i):
    '''page 110 of docs
    Qsurf: runoff from storm
    Rday: total rainfall mm
    i: peak rainfall intensity mm/hr
    
    note, original equation includes area, and is scaled to give 
    m**3 water based on km**2.
        '''
    
    Qpeak = (Qsurf/Rday)*i/3.6
    return Qpeak



def calc_tconc(lenslope, avg_slope, manning_n):
    '''Caculate time of concentration for a subbasin.
    SWAT technical documentation Page 111

    Parameters
    ----------
    lenslope : numeric
       length of slope (m)
    avg_slope : numeric
        average slope in degrees
    
    manning_n : numeric
        roughness coefficient

    Returns
    -------
    tconc : time of concentration, in hours.

    '''
    
    
   
    

    
    
    tconc = lenslope **.6 * manning_n **.6 / (18 *avg_slope**.3)
    return tconc


def modified_rational(frac_rainfall, Qsurf, tconc):
    '''The modified rational equation for calculating peak runoff.
    
    SWAT Technical docs page 115
    
    Equation yields m**3 per km**2, 
    Which is equivalent to mm in depth

    Parameters
    ----------
    frac_rainfall : fraction of total rainfall in the time of concentration
        
    Qsurf : total runoff (mm)
        
    tconc : time of concentration. (calculated with calc_tconc)
        

    Returns
    -------
    peak runoff rate in mm/hr

    '''
    
    

    return frac_rainfall * Qsurf/ (3.6 * tconc) * 100


def calc_frac_rainfall(tconc, max_hlf_hr):
    '''Calculate fraction_rainfall falling in 1/2 hr max'''
    
    
    frac_rainfall = 1 - exp(2 * tconc * log(1-max_hlf_hr))
    return frac_rainfall



def peak_runoff(Qsurf, tconc, max_hlf_hr_rfall):
    '''
    Calculate peak runoff using the rational eqaution.
    
    Parameters
    ----------
    Qsurf : total runoff in mm
       
    tconc : time of concentration for basin. 
    
    max_hlf_hr_rfall : maximum half-hour rainfall

    Returns
    -------
    Qpeak : peak runoff in mm/hr

    '''
    
    
    frac_rainfall = calc_frac_rainfall(tconc, max_hlf_hr_rfall)
    Qpeak = modified_rational(frac_rainfall, Qsurf,  tconc)
    return Qpeak






#%%


def SCN_alt(SW, w1, w2, Smax):
    '''
    Alternate method for curve number, based on 
    soil water content 

    
    SWAT technical documents page 103
    
    Parameters
    ----------
    SW : numeric
        soil water content in mm
    w1 : TYPE
        shape parameter generated by calc_alt_params
    w2 : TYPE
        shape parameter generated by calc_alt_params
    Smax : TYPE
        Maximum value that S, the retention parameter, can take for this soil.

    Returns
    -------
    An SCS curve number between 0 and 100

    
   '''
    
    S = Smax * (1- (SW/ (SW + exp(w1-w2 * SW))))
    SCNe =25400 /(S +254)
    return SCNe
    


def calc_alt_params(CN, field_cap_wat, soil_wat):
    '''
    Calculate the needed parameters for the alternate SCN equation.
    
    
    
    SWAT Technical Documents Page 104
    

    Parameters
    ----------
    CN : the curve number for average soil conditions
        
    field_cap_wat : volumetric soil water content at field capacity (- pwp water)
        DESCRIPTION.
    soil_wat : volumetric soil water content on day (-pwp water)
        DESCRIPTION.

    Returns
    -------
    w1 : shape parameter 1
        
    w2 : shape parameter 2
    
    Smax : theoretical maximum value for the water retention parameter S

    '''
    
    Smax = S_calc(CN1(CN))
    S3 = S_calc(CN3(CN))
    num = log(field_cap_wat/(1-S3*(1/Smax))-field_cap_wat) - \
        log(soil_wat / (1-2.54 * (1/Smax)) - soil_wat)
    
    denom = soil_wat - field_cap_wat
    
    w2 = num/denom
    
    w1 = log(field_cap_wat/ (1-S3 * 1/Smax) - field_cap_wat ) + w2 * field_cap_wat
    
    return w1, w2, Smax

def S_calc(CN):
    '''
    Calculate the retention parameter (S) for a given curve number.

    Parameters
    ----------
    CN : an NRCS curve number, between 0 and 100

    Returns
    -------
    S : Retention parameter for runoff. 

    '''
    
    S = 25.4 * (1000/CN -10)
    return S


def inv_Scalc(S):
    '''Calculate the curve number based on the retention parameter

    Parameters
    ----------
    S : NRCS Curve Number method retention parameter
    

    Returns
    -------
    CN : An NRCS Curve Number

    '''
    
    
    CN = 1000/(S/25.4 + 10)
    return CN


def effective_S_infl(infl_to_runoff):
    if infl_to_runoff ==0:
        return nan
    
    else:
        return 1000/(infl_to_runoff/10.8 + 10)


def effective_S(Qsurf, Rday):
    '''
    Estimate the effective S value from the SCN equation based on 
    the surface runoff and Rainfall. 
    This then allows reverse-estimation of the Curve number

    Parameters
    ----------
    Qsurf : float
    surface runoff (mm)
    Rday : numeric
        rainfall for the day (mm).

    Returns
    -------
    Sval: the effective value of the retention parameter (S) of
    the soil.
    str
        flag as to whether the value is an estimate of the minimum
        possible value of the S parameter, or a best-guess.
       
        If there is no runoff, we can only estimate the minimum
        value of the retention parameter. 
    '''
    S = Symbol('S')
    if Qsurf == 0:
        Smin = Rday * 5
        return  Smin, 'min'
    else:
        S_vals = solve((Rday-(.2*S))**2/(Rday+(.8*S))-Qsurf, S)
        return min(S_vals), 'est'
    



def SCN_eq(Rday, CN, Ia = None):
    '''
    'SCS curve number equation.



    Parameters
    ----------
    Rday : total rainfall for the day (mm)
    CN : NRCS Curve Number between 0-100
        
    Ia : Initial abstractions ( rainfall absorbed before runoff) in mm.
    Defaults to .2 * S.

    Returns
    -------
    Qsurf : total runoff in mm

    
    Page 122 of SWAT technical docs.
    '''

    S = S_calc(CN)
    if not Ia:
        Ia = .2*S
    if Rday > Ia:
        Qsurf = (Rday- Ia)**2/(Rday -Ia +S)
    else:
        Qsurf = 0
    
    return Qsurf


    
def CN1(CN2):
    '''Calcuate the Curve Number for soil moisture condition 1:
        very dry.'''
    
    cn_adj = CN2 - (20 * (100 - CN2)/(100-CN2 + exp(2.533 -.0636 * (100-CN2))))
    return cn_adj

def CN3(CN2):
    '''Calculate the curve number for soil mois
    ture condition 2:
        saturated/near-saturation.'''
        
    cn_adj = CN2 * exp(.00673*(100-CN2))
    return cn_adj


    
def curve_num(moisture_condition, CN2):
    '''Adjust Curve Number for moisture condition.
    page 103
    conditions: 
        1: dry
        2: average
        3: field capacity
    '''
    if moisture_condition ==2:
        SCNe = CN2
    elif moisture_condition == 1:
        SCNe = CN1(CN2)
    elif moisture_condition == 3:
        SCNe = CN3(CN2)
    return SCNe


def slope_adj_CN(CN2, slope):
    '''Adjust the standard CN2 for slope.
    Page 106 of the SWAT Technical Docs.
    
    Parameters:
        CN2 - numeric,
        Curve number for the average moisture condition.
        Between 0 and 100
        
        Slope- numeric 
        slope of the field (fraction)
    '''
    
    C3 = CN3(CN2)
    C1 = CN1(CN2)
    SCNe = (C3 - C1)/3 * (1- 2* exp(-13.86 *slope)) + CN2 
    return SCNe