window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "py_soil.CN_GA_conversions", "modulename": "py_soil.CN_GA_conversions", "type": "module", "doc": "<p>Functions for converting results from Curve-Number simulations to Green-Ampt parameters\nand vice-versa.</p>\n\n<p>Taken From:\nBaiamonte, G. (2019). SCS curve number and green-Ampt infiltration models. \nJournal of Hydrologic Engineering, 24(10), 04019034.\nhttps://ascelibrary.org/doi/pdf/10.1061/%28ASCE%29HE.1943-5584.0001838?casa_token=W7b6GRxE6j0AAAAA:t5kZ935hvintrt5mUAcvaFVIwcAuTG085rj6fFi2peXxQJUpWJjPIwS1BAkfN1uMoB5sxjmfRw</p>\n"}, {"fullname": "py_soil.CN_GA_conversions.GA_t_scale", "modulename": "py_soil.CN_GA_conversions", "qualname": "GA_t_scale", "type": "function", "doc": "<p>Calculate the sorbitivity timescale for the soil. </p>\n\n<p>Parameters</p>\n\n<hr />\n\n<p>delt_vmc :\n    Change in volumetric moisture content across the wetting front (mm/mm)</p>\n\n<p>matric_pot :  matric potential of a soil in pascals</p>\n\n<p>Ksat : saturated hydraulic conductivity (mm/hr)</p>\n\n<p>Returns</p>\n\n<hr />\n\n<p>tc_ga : Characteristic timescale of the infiltration process.</p>\n\n<p>Equation 12B</p>\n", "signature": "(delt_vmc, matric_pot, Ksat)", "funcdef": "def"}, {"fullname": "py_soil.CN_GA_conversions.CN_est", "modulename": "py_soil.CN_GA_conversions", "qualname": "CN_est", "type": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>t : time (hrs)\nKsat : saturated hydraulic conductivity (mm/hr)</p>\n\n<p>rho: rainfall intensity noramlized to the \nSaturated Hydraulic Conductivity of the soil (unitless)</p>\n\n<p>norm_duration :  normalized duration of rainfall (in hours)\ncalculated with function calc_norm_duration</p>\n\n<p>runoff_coef : fraction of rainfall lost as runoff. (between 0 and 1)</p>\n\n<p>lamb : ratio of initial abstractions to the S parameter of the SCS CN equation.\n The default is .2.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Estimated Curve Number</p>\n\n<pre><code>Equation #22b\n</code></pre>\n", "signature": "(t, Ksat, rho, norm_duration, ro_coef_GA, lamb=0.2)", "funcdef": "def"}, {"fullname": "py_soil.CN_GA_conversions.calc_rho", "modulename": "py_soil.CN_GA_conversions", "qualname": "calc_rho", "type": "function", "doc": "<p>Return the rainfall intensity noramlized to the \nSaturated Hydraulic Conductivity of the soil</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>Ksat : saturated hydraulic conductivity (mm/hr)</p>\n\n<p>r_intens : rainfall intensity (mm/hr)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>rho: rainfall intensity noramlized to the \nSaturated Hydraulic Conductivity of the soil (unitless)</p>\n\n<p>Immediately after equation #13.</p>\n", "signature": "(Ksat, r_intens)", "funcdef": "def"}, {"fullname": "py_soil.CN_GA_conversions.calc_norm_duration", "modulename": "py_soil.CN_GA_conversions", "qualname": "calc_norm_duration", "type": "function", "doc": "<p>Calculate the normalized duration of rainfall in hours.      </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>ro_coef_GA : runoff as a fraction of rainfall in the storm, \n            as simulated using the green-ampt-model</p>\n\n<p>rho: rainfall intensity noramlized to the \n  Saturated Hydraulic Conductivity of the soil (unitless). \n  Can be calculated with the function calc_rho.</p>\n\n<p>lamb : ratio of initial abstractions to the S parameter of the SCS CN equation.\n The default is .2.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>normalized duration of rainfall (in hours)</p>\n\n<p>Equation #16</p>\n", "signature": "(ro_coef_GA, rho, lamb=0.2)", "funcdef": "def"}, {"fullname": "py_soil.CN_GA_conversions.KsMax", "modulename": "py_soil.CN_GA_conversions", "qualname": "KsMax", "type": "function", "doc": "<p>Calculate maximum Ksat value compatible with any runoff from the soil.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>GA_t_scale :  Characteristic timescale of the infiltration process for the soil.</p>\n\n<p>r_intense : intensity of rainfall (mm/hr)\n    DESCRIPTION.</p>\n\n<p>t : time of rainfall (hrs)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Theoretical maximum value of Ksat for the soil.</p>\n\n<pre><code>Equation 23b\n</code></pre>\n", "signature": "(GA_t_scale, r_intense, t)", "funcdef": "def"}, {"fullname": "py_soil.CN_GA_conversions.CN_min", "modulename": "py_soil.CN_GA_conversions", "qualname": "CN_min", "type": "function", "doc": "<p>Calculate the minimum estimated Curve Number for the soil based on the \n   rainfall simulation. </p>\n\n<p>Parameters</p>\n\n<hr />\n\n<p>Ksat_max : Max value for saturated Hydraulic Conductivity (mm/mm)\n   calculated using Ks_max</p>\n\n<p>rho: rainfall intensity noramlized to the \n  Saturated Hydraulic Conductivity of the soil (unitless). \n  Can be calculated with the function calc_rho.</p>\n\n<p>lamb : ratio of initial abstractions to the S parameter of the SCS CN equation.\n The default is .2.</p>\n\n<p>Returns</p>\n\n<hr />\n\n<p>Estimate of the minimum value of the CN for the soil.</p>\n\n<p>Equation #24</p>\n", "signature": "(Ksat_max, hrs, rho, lamb=0.2)", "funcdef": "def"}, {"fullname": "py_soil.CN_GA_conversions.estimate_CN", "modulename": "py_soil.CN_GA_conversions", "qualname": "estimate_CN", "type": "function", "doc": "<p>Run all steps for estimating the effective curve-number of a soil \nbased on Green-Ampt Simlations and parameters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>delt_vmc :\n    Change in volumetric moisture content across the wetting front (mm/mm)\nKsat : saturated hydraulic conductivity (mm/hr)</p>\n\n<p>matric_pot :  matric potential of a soil in pascals\nhrs : time of storm event (in hrs)</p>\n\n<p>r_intens : rainfall intensity (mm/hr)</p>\n\n<p>ro_coef_GA : runoff as a fraction of rainfall in the storm, \n            as simulated using the green-ampt-model\nlamb : TYPE, optional\n    DESCRIPTION. The default is .2.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>An estimated equivalent Curve Number</p>\n", "signature": "(delt_vmc, Ksat, matric_pot, hrs, r_intens, ro_coef_GA, lamb=0.2)", "funcdef": "def"}, {"fullname": "py_soil.__init__", "modulename": "py_soil.__init__", "type": "module", "doc": "<p>py_soil: A library of pedo-transfer functions and other \nuseful soil-related formulas and equations.</p>\n"}, {"fullname": "py_soil.erosion", "modulename": "py_soil.erosion", "type": "module", "doc": "<p>A few functions for calculating erosion using the Universal Soil Loss Equation\n(USLE)</p>\n"}, {"fullname": "py_soil.erosion.usle", "modulename": "py_soil.erosion", "qualname": "usle", "type": "function", "doc": "<p>Simplest form of the Universal Soil Loss Equation</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>R : Rainfall Erosivity Parameter</p>\n\n<p>K : Soil erodibility factor: between 0 and 1</p>\n\n<p>C : Cover management factor: between 0 and 1</p>\n\n<p>P : Practice factor: between 0 and 1\n    DESCRIPTION.\nLS : Length-slope factor.\n    Can be calculated with function calc_ls</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Soil Erosion (metric tons/acre/yr)</p>\n", "signature": "(R, K, C, P, LS)", "funcdef": "def"}, {"fullname": "py_soil.erosion.calc_CFRG", "modulename": "py_soil.erosion", "qualname": "calc_CFRG", "type": "function", "doc": "<p>Calculate the CFRG factor for the MUSLE, based on the % coarse rock fragments.</p>\n\n<p>From the SWAT Technical docs, page 259</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>(perc_coarse_frag : numeric\n    percent rock fragments in the soil.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\n    DESCRIPTION.</p>\n", "signature": "(perc_coarse_frag)", "funcdef": "def"}, {"fullname": "py_soil.erosion.musle", "modulename": "py_soil.erosion", "qualname": "musle", "type": "function", "doc": "<p>Modified Universal soil loss equation. </p>\n\n<p>Parameters</p>\n\n<hr />\n\n<p>R_factor : float\n       rainfall factor.</p>\n\n<p>K : float\n      USLE K factor for soil erodibility. (between 0 and 1)\n   C : float\n       USLE C factor for crop-type. (between 0 and 1)\n   P : float\n       USLE P factor for support practice (between 0 and 1)\n   LS : float\n       USLE Length-slope factor (&gt;0)\n   CFRG : float\n       Course fragment factor </p>\n\n<p>Returns</p>\n\n<hr />\n\n<p>sediment yield. </p>\n\n<p>Page 252 SWAT technical docs</p>\n", "signature": "(R_factor, K, C, P, LS, CFRG)", "funcdef": "def"}, {"fullname": "py_soil.erosion.calc_LS", "modulename": "py_soil.erosion", "qualname": "calc_LS", "type": "function", "doc": "<p>Calculate the LS factor for a field based on average slope \nand the length of slope.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>slope : numeric\n    average slope in % grade.\nslope_length : slope length in meters\n    DESCRIPTION.\nconstant : TYPE, optional\n    DESCRIPTION. The default is 22.1.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>LS : USLE LS factor (unitless)</p>\n", "signature": "(slope, slope_length, constant=22.1)", "funcdef": "def"}, {"fullname": "py_soil.runoff", "modulename": "py_soil.runoff", "type": "module", "doc": "<p>Functions for predicting runoff, relating to the NRCS curve-number method.</p>\n"}, {"fullname": "py_soil.runoff.CN_get", "modulename": "py_soil.runoff", "qualname": "CN_get", "type": "function", "doc": "<p>Retrieve Curve Number for given crop_cover and hydro-group.\nBy default it gives the average for all sets of treatment_or_practice, \nand hydrologic_condition for that given crop and hydro-group.</p>\n\n<p>Optionally, you can get more specific data by passing an argument to treatment_or_practice\nor hydrologic_condition, but be careful, these names must correctly formatted. </p>\n\n<p>See the spreadsheet at data/curve_nums for possible values.</p>\n", "signature": "(\n    crop_cover,\n    hydro_group,\n    treatment_or_practice=None,\n    hydrologic_condition=None\n)", "funcdef": "def"}, {"fullname": "py_soil.runoff.calcKeff", "modulename": "py_soil.runoff", "qualname": "calcKeff", "type": "function", "doc": "<p>Calculate the effective hydraulic conductivity for a soil</p>\n\n<p>Swat technical docs Page 108</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>curve_num : numeric\n    SCS curve number for soil\nKsat : numeric\n    Saturated Hydraulic conductivity for soil (mm/hr)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Keff : float\neffective hydraulic conductivity in mm/hr</p>\n", "signature": "(CN, Ksat)", "funcdef": "def"}, {"fullname": "py_soil.runoff.rational_eq", "modulename": "py_soil.runoff", "qualname": "rational_eq", "type": "function", "doc": "<p>page 110 of docs\nQsurf: runoff from storm\nRday: total rainfall mm\ni: peak rainfall intensity mm/hr</p>\n\n<p>note, original equation includes area, and is scaled to give \nm<strong>3 water based on km</strong>2.</p>\n", "signature": "(Qsurf, Rday, i)", "funcdef": "def"}, {"fullname": "py_soil.runoff.calc_tconc", "modulename": "py_soil.runoff", "qualname": "calc_tconc", "type": "function", "doc": "<p>Caculate time of concentration for a subbasin.\nSWAT technical documentation Page 111</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>lenslope : numeric\n   length of slope (m)\navg_slope : numeric\n    average slope in degrees</p>\n\n<p>manning_n : numeric\n    roughness coefficient</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>tconc : time of concentration, in hours.</p>\n", "signature": "(lenslope, avg_slope, manning_n)", "funcdef": "def"}, {"fullname": "py_soil.runoff.modified_rational", "modulename": "py_soil.runoff", "qualname": "modified_rational", "type": "function", "doc": "<p>The modified rational equation for calculating peak runoff.</p>\n\n<p>SWAT Technical docs page 115</p>\n\n<p>Equation yields m<strong>3 per km</strong>2, \nWhich is equivalent to mm in depth</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>frac_rainfall : fraction of total rainfall in the time of concentration</p>\n\n<p>Qsurf : total runoff (mm)</p>\n\n<p>tconc : time of concentration. (calculated with calc_tconc)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>peak runoff rate in mm/hr</p>\n", "signature": "(frac_rainfall, Qsurf, tconc)", "funcdef": "def"}, {"fullname": "py_soil.runoff.calc_frac_rainfall", "modulename": "py_soil.runoff", "qualname": "calc_frac_rainfall", "type": "function", "doc": "<p>Calculate fraction_rainfall falling in 1/2 hr max</p>\n", "signature": "(tconc, max_hlf_hr)", "funcdef": "def"}, {"fullname": "py_soil.runoff.peak_runoff", "modulename": "py_soil.runoff", "qualname": "peak_runoff", "type": "function", "doc": "<p>Calculate peak runoff using the rational eqaution.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>Qsurf : total runoff in mm</p>\n\n<p>tconc : time of concentration for basin. </p>\n\n<p>max_hlf_hr_rfall : maximum half-hour rainfall</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Qpeak : peak runoff in mm/hr</p>\n", "signature": "(Qsurf, tconc, max_hlf_hr_rfall)", "funcdef": "def"}, {"fullname": "py_soil.runoff.SCN_alt", "modulename": "py_soil.runoff", "qualname": "SCN_alt", "type": "function", "doc": "<p>Alternate method for curve number, based on \nsoil water content </p>\n\n<p>SWAT technical documents page 103</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>SW : numeric\n    soil water content in mm\nw1 : TYPE\n    shape parameter generated by calc_alt_params\nw2 : TYPE\n    shape parameter generated by calc_alt_params\nSmax : TYPE\n    Maximum value that S, the retention parameter, can take for this soil.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>An SCS curve number between 0 and 100</p>\n", "signature": "(SW, w1, w2, Smax)", "funcdef": "def"}, {"fullname": "py_soil.runoff.calc_alt_params", "modulename": "py_soil.runoff", "qualname": "calc_alt_params", "type": "function", "doc": "<p>Calculate the needed parameters for the alternate SCN equation.</p>\n\n<p>SWAT Technical Documents Page 104</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>CN : the curve number for average soil conditions</p>\n\n<p>field_cap_wat : volumetric soil water content at field capacity (- pwp water)\n    DESCRIPTION.\nsoil_wat : volumetric soil water content on day (-pwp water)\n    DESCRIPTION.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>w1 : shape parameter 1</p>\n\n<p>w2 : shape parameter 2</p>\n\n<p>Smax : theoretical maximum value for the water retention parameter S</p>\n", "signature": "(CN, field_cap_wat, soil_wat)", "funcdef": "def"}, {"fullname": "py_soil.runoff.S_calc", "modulename": "py_soil.runoff", "qualname": "S_calc", "type": "function", "doc": "<p>Calculate the retention parameter (S) for a given curve number.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>CN : an NRCS curve number, between 0 and 100</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>S : Retention parameter for runoff.</p>\n", "signature": "(CN)", "funcdef": "def"}, {"fullname": "py_soil.runoff.inv_Scalc", "modulename": "py_soil.runoff", "qualname": "inv_Scalc", "type": "function", "doc": "<p>Calculate the curve number based on the retention parameter</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>S : NRCS Curve Number method retention parameter</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>CN : An NRCS Curve Number</p>\n", "signature": "(S)", "funcdef": "def"}, {"fullname": "py_soil.runoff.effective_S_infl", "modulename": "py_soil.runoff", "qualname": "effective_S_infl", "type": "function", "doc": "<p></p>\n", "signature": "(infl_to_runoff)", "funcdef": "def"}, {"fullname": "py_soil.runoff.effective_S", "modulename": "py_soil.runoff", "qualname": "effective_S", "type": "function", "doc": "<p>Estimate the effective S value from the SCN equation based on \nthe surface runoff and Rainfall. \nThis then allows reverse-estimation of the Curve number</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>Qsurf : float\nsurface runoff (mm)\nRday : numeric\n    rainfall for the day (mm).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Sval: the effective value of the retention parameter (S) of\nthe soil.\nstr\n    flag as to whether the value is an estimate of the minimum\n    possible value of the S parameter, or a best-guess.</p>\n\n<pre><code>If there is no runoff, we can only estimate the minimum\nvalue of the retention parameter.\n</code></pre>\n", "signature": "(Qsurf, Rday)", "funcdef": "def"}, {"fullname": "py_soil.runoff.SCN_eq", "modulename": "py_soil.runoff", "qualname": "SCN_eq", "type": "function", "doc": "<p>'SCS curve number equation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>Rday : total rainfall for the day (mm)\nCN : NRCS Curve Number between 0-100</p>\n\n<p>Ia : Initial abstractions ( rainfall absorbed before runoff) in mm.\nDefaults to .2 * S.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Qsurf : total runoff in mm</p>\n\n<p>Page 122 of SWAT technical docs.</p>\n", "signature": "(Rday, CN, Ia=None)", "funcdef": "def"}, {"fullname": "py_soil.runoff.CN1", "modulename": "py_soil.runoff", "qualname": "CN1", "type": "function", "doc": "<p>Calcuate the Curve Number for soil moisture condition 1:\nvery dry.</p>\n", "signature": "(CN2)", "funcdef": "def"}, {"fullname": "py_soil.runoff.CN3", "modulename": "py_soil.runoff", "qualname": "CN3", "type": "function", "doc": "<p>Calculate the curve number for soil mois\nture condition 2:\n    saturated/near-saturation.</p>\n", "signature": "(CN2)", "funcdef": "def"}, {"fullname": "py_soil.runoff.curve_num", "modulename": "py_soil.runoff", "qualname": "curve_num", "type": "function", "doc": "<p>Adjust Curve Number for moisture condition.\npage 103\nconditions: \n    1: dry\n    2: average\n    3: field capacity</p>\n", "signature": "(moisture_condition, CN2)", "funcdef": "def"}, {"fullname": "py_soil.runoff.slope_adj_CN", "modulename": "py_soil.runoff", "qualname": "slope_adj_CN", "type": "function", "doc": "<p>Adjust the standard CN2 for slope.\nPage 106 of the SWAT Technical Docs.</p>\n\n<p>Parameters:\n    CN2 - numeric,\n    Curve number for the average moisture condition.\n    Between 0 and 100</p>\n\n<pre><code>Slope- numeric \nslope of the field (fraction)\n</code></pre>\n", "signature": "(CN2, slope)", "funcdef": "def"}, {"fullname": "py_soil.setup", "modulename": "py_soil.setup", "type": "module", "doc": "<p>Created on Thu Nov 11 17:50:46 2021</p>\n\n<p>@author: bdube</p>\n"}, {"fullname": "py_soil.soil_structure", "modulename": "py_soil.soil_structure", "type": "module", "doc": "<p>Pedo-transfer functions for soil structure parameters, \nincluding multiple methods for the Universal Soil Loss Equation Erodibility Factor (K).</p>\n"}, {"fullname": "py_soil.soil_structure.calc_porosity", "modulename": "py_soil.soil_structure", "qualname": "calc_porosity", "type": "function", "doc": "<p>Calculate porosity cm3/cm3 based on particle density and bulk density.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>bulk_dens : numeric\n    bulk density of the soil Mg/m**3</p>\n\n<p>particle_dens : numeric\n     particle density of the soil Mg/m**3</p>\n", "signature": "(bulk_dens, particle_dens)", "funcdef": "def"}, {"fullname": "py_soil.soil_structure.soil_perm_class", "modulename": "py_soil.soil_structure", "qualname": "soil_perm_class", "type": "function", "doc": "<p>Soil Permeability class for wishmeir method of the K factor.\npage 255 SWAT technical docs.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>Ksat : numeric\n    Saturated Hydraulic Conductivity in mm/hr</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>int\n   a soil permeability class code.</p>\n", "signature": "(Ksat)", "funcdef": "def"}, {"fullname": "py_soil.soil_structure.struct_stability_index", "modulename": "py_soil.soil_structure", "qualname": "struct_stability_index", "type": "function", "doc": "<p>Calculate the structural stability index in percents for the soil</p>\n\n<p>From Reynolds, et al 2009\ndoi:10.1016/j.geoderma.2009.06.009</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_silt : numeric\n    percent silt particles in soil. Range: 0-100\nperc_clay : numeric\n    percent clay particles in soil. Range: 0-100</p>\n\n<p>orgC : numeric\n    % organic carbon of soil. Range: 0-100</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>SI : Soil Structural Stability Index</p>\n\n<p>Values &gt;9% indicate stable soil structure\nValues 7-9% are low risk for degradation.\nValues 5-7% are high risk.\nValues below 5% are structurally degratded.</p>\n", "signature": "(perc_silt, perc_clay, orgC)", "funcdef": "def"}, {"fullname": "py_soil.soil_structure.particle_density", "modulename": "py_soil.soil_structure", "qualname": "particle_density", "type": "function", "doc": "<p>Predict soil Particle Density based on clay fraction \nand soil organic matter.</p>\n\n<p>equation from https://doi.org/10.1016/j.geoderma.2016.10.020</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_clay : numeric\n    percent clay particles in soil. Range: 0-100</p>\n\n<p>OM : numeric\n    % Soil Organic Matter of Soil. Range: 0-100</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float \nparticle density in Mg/m**3</p>\n", "signature": "(perc_clay, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_structure.williamsK", "modulename": "py_soil.soil_structure", "qualname": "williamsK", "type": "function", "doc": "<p>Williams equation for calculating the USLE K factor.\nDeveloped for the EPIC / APEX model.</p>\n\n<p>SWAT technical documentation, page 255</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_clay : numeric\n    percent clay particles in soil. Range: 0-100\nperc_silt : numeric\n    percent silt particles in soil. Range: 0-100\nperc_sand : numeric\n    percent sand particles in soil. Range: 0-100</p>\n\n<p>orgC: numeric \n    percent organic carbon content of soil. Range: 0-100</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\nUSLE K factor: soil erodibility. Range: 0-1</p>\n", "signature": "(perc_clay, perc_silt, perc_sand, orgC)", "funcdef": "def"}, {"fullname": "py_soil.soil_structure.wishmK_continuous", "modulename": "py_soil.soil_structure", "qualname": "wishmK_continuous", "type": "function", "doc": "<p>Calculate the soil erodibility (K) factor using the wishmeir\nequation, with continuous, rather than values for the soil permeability code.</p>\n\n<p>perc_silt : numeric\n    percent silt particles in soil. Range: 0-100</p>\n\n<p>perc_vfs : numeric\n    percent very-fine sand particles in soil. Range: 0-100</p>\n\n<p>perc_clay : numeric\n    percent clay particles in soil. Range: 0-100</p>\n\n<p>Ksat : Saturated Hydraulic Conductivity (mm/hr)</p>\n\n<p>soil_str : Soil structure code. range (1-4)</p>\n\n<p>OM : numeric\n    % Soil Organic Matter of Soil. Range: 0-100</p>\n", "signature": "(perc_silt, perc_vfs, perc_clay, Ksat, soil_str, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_structure.wishmeirK", "modulename": "py_soil.soil_structure", "qualname": "wishmeirK", "type": "function", "doc": "<p>Wishmeir equation for calculating soil erodibility factor \n(USLE K).\nFor more information, see \nthe SWAT technical documentation page 254.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_silt : numeric\n     percent silt particles in soil. Range: 0-100\nvfs : numeric\n    percent very fine sand particles in soil. Range: 0-100\nperc_clay : numeric\n    percent clay particles in soil. Range: 0-100\nperm_code : int\n    soil permeability class, range:  1-6\nsoil_str : int\n    soil structure class: range 1-4\n    Values correspond to: \n        1: Very Fine Granular\n        2: Fine Granular\n        3: Medium or Coarse Granular\n        4: Blocky, platy, prism-like or massive.</p>\n\n<p>OM : numeric\n    percent organic matter in soil. Range: 0-100</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>float\nUSLE Soil erodibility factor K, between 0 and 1</p>\n", "signature": "(perc_silt, perc_vfs, perc_clay, perm_code, soil_str, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_water", "modulename": "py_soil.soil_water", "type": "module", "doc": "<p>Pedo-transfer functions for predicting soil water parameters such as water content \nat field capacity, permanent wilting point and saturation.</p>\n"}, {"fullname": "py_soil.soil_water.rosetta3", "modulename": "py_soil.soil_water", "qualname": "rosetta3", "type": "function", "doc": "<p>Run the rosetta 3 model to retrieve predicted soil parameters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : numeric\n    percent sand particles in soil. Range: 0-100</p>\n\n<p>perc_silt : numeric\n    percent silt particles in soil. Range: 0-100</p>\n\n<p>perc_clay : numeric\n    percent clay particles in soil. Range: 0-100</p>\n\n<p>bulk_dens : numeric\n    bulk density of soil (kg/m^3)</p>\n\n<p>field_capacity_wc: volumetric water content of soil at field capacity.</p>\n\n<p>pwp_wc: volumetric water content of soil at the permanent wilting point.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Array of residual water content (fraction), \nsaturated water content (fractional), \ntwo water retention parameters and \nthe saturated hydraulic conductivity (mm/hr).</p>\n", "signature": "(\n    perc_sand,\n    perc_silt,\n    perc_clay,\n    bulk_dens=None,\n    field_capacity_wc=None,\n    pwp_wc=None\n)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.kSat_Nemes_Rawls", "modulename": "py_soil.soil_water", "qualname": "kSat_Nemes_Rawls", "type": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : numeric\n    percent sand particles in soil. Range: 0-100</p>\n\n<p>perc_clay : numeric\n    percent clay particles in soil. Range: 0-100</p>\n\n<p>bulk_dens : numeric\n    bulk density of soil (kg/m^3)</p>\n\n<p>OM : TYPE\n    Soil Organic Matter content. Range: 0-100</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Ksat : saturated hydraulic conductivity in mm/hr</p>\n", "signature": "(perc_sand, perc_clay, bulk_dens, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.kSat_Gupta", "modulename": "py_soil.soil_water", "qualname": "kSat_Gupta", "type": "function", "doc": "<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : numeric\n    percent sand particles in soil. Range: 0-100</p>\n\n<p>perc_clay : numeric\n    percent clay particles in soil. Range: 0-100</p>\n\n<p>bulk_dens : numeric\n    bulk density of soil (kg/m^3)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>Ksat : saturated hydraulic conductivity in mm/hr</p>\n", "signature": "(perc_sand, perc_clay, bulk_dens)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.VG_swr", "modulename": "py_soil.soil_water", "qualname": "VG_swr", "type": "function", "doc": "<p>Implement the van Genuchten soil water retention model to predict\nvolumetric soil water content at a pressure level si. </p>\n\n<p>For details on the model itself: \nhttps://hwbdocuments.env.nm.gov/Los%20Alamos%20National%20Labs/TA%2054/11569.pdf</p>\n\n<p>Modified from https://github.com/tpclement/PySWR</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>si : numeric\n    suction pressure to estimate soil water content at (kPa)\nteta_r : numeric\n    residual water content (cm^3/cm^3).\nteta_s : TYPE\n    saturated water content (cm^3/cm^3).\nnpar : numeric\n    pore-size distribution (dimensionless). Can be calculated from the rosetta model</p>\n\n<p>phi_entry: air entry at suction or inverse air entry at suction.\ninverse of air entry at suction Can be calculated from the rosetta model</p>\n\n<p>phi_entry_is_inv: Flag for whether phi_entry is the inverse or actual value.\ndefault is True.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>teta : Volumetric Soil water content, value between 0 and 1</p>\n", "signature": "(phi, theta_r, theta_s, npar, phi_entry, phi_entry_is_inv=True)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.rosetta_solver", "modulename": "py_soil.soil_water", "qualname": "rosetta_solver", "type": "function", "doc": "<p>Combine the rosetta model, the van Genuchten soil water retention model\nand the balland pedotransfer functions to estimate field capacity, \npermanent wilting point, saturated hydraulic conductivity and\nsaturated water content.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : fraction sand content of soil. between 0 and 100</p>\n\n<p>perc_silt : fraction silt content of soil. between 0 and 100</p>\n\n<p>perc_clay : fraction clay content of soil. between 0 and 100</p>\n\n<p>bulk_dens : bulk density of the soil in g/cm**3</p>\n\n<p>OM : organic matter % of soil. </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>fc_avg : numeric\n    volumetric water content at field capacity. between 0 and 1\npwp_avg : numeric\n    volumetric water content at the permanent wilting point. \n    between 0 and 1\nksat : saturated hydraulic conductivity in mm/hr.</p>\n", "signature": "(perc_sand, perc_silt, perc_clay, bulk_dens, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.saturatedWC_byweight", "modulename": "py_soil.soil_water", "qualname": "saturatedWC_byweight", "type": "function", "doc": "<p></p>\n", "signature": "(bulk_dens, sat_wc)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.fieldCapacity_bal", "modulename": "py_soil.soil_water", "qualname": "fieldCapacity_bal", "type": "function", "doc": "<p>Equation to calculate volumetric water content of soil at field capacity\nFrom doi:10.1016/j.ecolmodel.2008.07.009, page  7</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>saturated_wc : volumetric water content of soil at saturation.\nbulk_dens : bulk density of the soil in g/cm**3 </p>\n\n<p>perc_clay : fraction clay content of soil. between 0 and 100\nperc_sand : fraction sand content of soil. between 0 and 100</p>\n\n<p>OM : organic matter % of soil. </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>field_capacity_wc : volumetric water content at field capacity</p>\n", "signature": "(saturated_wc, bulk_dens, perc_clay, perc_sand, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.permWiltPoint_bal", "modulename": "py_soil.soil_water", "qualname": "permWiltPoint_bal", "type": "function", "doc": "<p>Equation to calculate water content of soil at permenant wilting point in %.\nFrom doi:10.1016/j.ecolmodel.2008.07.009, page  7</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : fraction sand content of soil. between 0 and 100</p>\n\n<p>OM : organic matter % of soil. </p>\n\n<p>saturated_wc : volumetric water content at field capacity</p>\n\n<p>bulk_dens : bulk density of the soil in g/cm**3 </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>pwp_wc : volumetric water content at the permanent wilting point.</p>\n", "signature": "(field_capacity, perc_clay, perc_sand, OM, bulk_dens)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.fieldCapacityRawls1", "modulename": "py_soil.soil_water", "qualname": "fieldCapacityRawls1", "type": "function", "doc": "<p>Calculate the water content % at field capacity using the regression equation reported by Rawls (1982)</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : fraction sand content of soil. between 0 and 100</p>\n\n<p>OM : organic matter % of soil. </p>\n\n<p>pwp_wc : volumetric water content at the permanent wilting point.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>field_capacity_wc : volumetric water content at field capacity</p>\n", "signature": "(perc_sand, OM, pwp_wc)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.permwiltPointRawls", "modulename": "py_soil.soil_water", "qualname": "permwiltPointRawls", "type": "function", "doc": "<p>Caculate the pwp water content using the regression equation reported by Rawls (1982)\nW. J. Rawls, ; D. L. Brakensiek, ; K. E. Saxtonn, (1982). Estimation of Soil Water Properties. Transactions of the ASAE, 25(5), 13161320. doi:10.13031/2013.33720 \n   Parameters</p>\n\n<hr />\n\n<p>perc_clay : fraction clay content of soil. between 0 and 100</p>\n\n<p>OM : organic matter % of soil. </p>\n\n<p>Returns</p>\n\n<hr />\n\n<p>pwp_wc : volumetric water content at the permanent wilting point.</p>\n", "signature": "(perc_clay, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.fieldCapacityRawls2", "modulename": "py_soil.soil_water", "qualname": "fieldCapacityRawls2", "type": "function", "doc": "<p>Predicts the field capacity water content in cm^3/cm^3\nOne of two regression equations from:\nW. J. Rawls, ; D. L. Brakensiek, ; K. E. Saxtonn, (1982). Estimation of Soil Water Properties. Transactions of the ASAE, 25(5), 13161320. doi:10.13031/2013.33720 </p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>perc_sand : fraction sand content of soil. between 0 and 100</p>\n\n<p>perc_clay : fraction clay content of soil. between 0 and 100</p>\n\n<p>OM : organic matter % of soil. </p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>None.</p>\n", "signature": "(perc_sand, perc_clay, OM)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.calc_matric_pot", "modulename": "py_soil.soil_water", "qualname": "calc_matric_pot", "type": "function", "doc": "<p>Calculate matric potential of a soil's wetting front.</p>\n\n<pre><code>Parameters\n----------\nporosity : float\n    total porosity of a soil, mm/mm.\n    Value between 0 and 1\nperc_clay : numeric\n    % clay content of the top layer of soil.\n    Between 0 and 100\nperc_sand : numeric \n    % sand content of the top layer of soil.\n\nReturns\n-------\nfloat \nmatric potential of a soil in pascals\n</code></pre>\n\n<p>equation from     Rawls and Brakensiek (1985)\nFound on SWAT tech docs page 109</p>\n", "signature": "(porosity, perc_clay, perc_sand)", "funcdef": "def"}, {"fullname": "py_soil.soil_water.delt_VMC", "modulename": "py_soil.soil_water", "qualname": "delt_VMC", "type": "function", "doc": "<p>Change in volumetric moisture content across the wetting front</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>swc : numeric\n    current soil water content (mm)\nfield_capacity_wc : numeric\n    water content at field capacity (mm)</p>\n\n<p>pwp_wc : water content at the permanent wilting point (m)</p>\n\n<p>porosity : soil porosity (mm3/mm3)</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>delt_vmc\n    Change in volumetric moisture content across the wetting front (mm/mm)</p>\n", "signature": "(swc, field_capacity_wc, pwp_wc, porosity)", "funcdef": "def"}, {"fullname": "py_soil.utils", "modulename": "py_soil.utils", "type": "module", "doc": "<p>Created on Wed Nov 10 13:09:59 2021</p>\n\n<p>@author: bdube</p>\n"}, {"fullname": "py_soil.utils.run_df", "modulename": "py_soil.utils", "qualname": "run_df", "type": "function", "doc": "<p>Wrapper to automatically run a function row-wise on a dataframe with \ncolumn names which match the function argument names.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>func : A function</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>TYPE\n    DESCRIPTION.</p>\n", "signature": "(func)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();